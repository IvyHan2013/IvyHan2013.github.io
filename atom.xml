<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yutong Han&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.yutong-han.net/"/>
  <updated>2018-01-01T23:57:55.306Z</updated>
  <id>http://www.yutong-han.net/</id>
  
  <author>
    <name>Yutong Han</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spack basics</title>
    <link href="http://www.yutong-han.net/2017/12/31/spark-1/"/>
    <id>http://www.yutong-han.net/2017/12/31/spark-1/</id>
    <published>2017-12-31T23:10:51.388Z</published>
    <updated>2018-01-01T23:57:55.306Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h3><h4 id="What-is-scala"><a href="#What-is-scala" class="headerlink" title="What is scala"></a>What is scala</h4><ul><li>It’s what spark is built with<ul><li>New features are often scala first</li><li>Spark can also be programed with Python and Java</li></ul></li><li>Runs on the top of the JVM<ul><li>can access Java classes</li></ul></li><li>Functional programming<ul><li>In the functional programming, we use a lot of functions</li><li>encourage immutable constant </li></ul></li></ul><h4 id="Scala-Basic"><a href="#Scala-Basic" class="headerlink" title="Scala Basic"></a>Scala Basic</h4><ol><li>immutable constant : <strong>val</strong><ul><li>eg. <code>val hello: String =&quot;Hola!&quot;</code></li><li>name this immutable constant <code>hello</code> type is string and set value as “Hola!”</li></ul></li><li>mutable constant : <strong>var</strong></li><li>println<ul><li>format numerical: start with <code>f</code></li><li>substituting <code>s</code></li><li>regluar expression: triple quote syntax follow by a dot R</li><li><code>val pattern(answerString) = theAnswer</code></li></ul></li><li>Boolean<ul><li><code>val isGreater = 1&gt;2</code></li><li><code>val isLesser = 1&lt;2</code></li><li><code>val impossible = isGreater &amp; is Lesser</code></li><li><code>val isEqual : Boolean = a==b</code></li></ul></li><li><p>if/else</p><ul><li><code>if(...){..} else {..}</code></li></ul></li><li><p>matching (like switch)</p></li></ol><p><code>val number =3number match{    case 1 =&gt; ...    case 2 =&gt; ...    case _ =&gt; (else)}</code></p><h4 id="Flow-Control"><a href="#Flow-Control" class="headerlink" title="Flow Control"></a>Flow Control</h4><ol><li>for loop</li></ol><p><code>for(x &lt;- 1 to 4){    val s = x*x    println(s)}</code></p><ol><li>while loop</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var x =10</span><br><span class="line">while (x&gt;=0)&#123;</span><br><span class="line">    println&#123;x&#125;</span><br><span class="line">    x-=1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">x=0</span><br><span class="line">do&#123;println&#123;x&#125;;x+=1&#125;while(x&lt;=10)</span><br></pre></td></tr></table></figure><ol><li>Expressions<ul><li>“Returns” the final value in a block automatically</li></ul></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;val x = 10;x+20&#125; //&gt; res0: Int =30</span><br></pre></td></tr></table></figure><h4 id="Functions-in-Scala"><a href="#Functions-in-Scala" class="headerlink" title="Functions in Scala"></a>Functions in Scala</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Scala&quot;&gt;&lt;a href=&quot;#Scala&quot; class=&quot;headerlink&quot; title=&quot;Scala&quot;&gt;&lt;/a&gt;Scala&lt;/h3&gt;&lt;h4 id=&quot;What-is-scala&quot;&gt;&lt;a href=&quot;#What-is-scala&quot; class=&quot;header
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dairy-2017-12-29</title>
    <link href="http://www.yutong-han.net/2017/12/29/dairy-1229/"/>
    <id>http://www.yutong-han.net/2017/12/29/dairy-1229/</id>
    <published>2017-12-29T23:27:31.873Z</published>
    <updated>2018-01-01T23:36:10.810Z</updated>
    
    <content type="html"><![CDATA[<p>每日学习日记 2017-12-29<br><a id="more"></a></p><ul><li><p>分割类DP</p><ul><li><p>Maximum Subarray</p><ul><li>一个模版</li><li>Math.max(cur+nums[i],nums[i])</li><li>Math.max(cur,max)</li></ul></li><li><p>Maximum Product Subarray</p><ul><li>注意乘法和加法不同在于最大值可能通过最小值乘负数得来，所以要维护最大值和最小值，同时正负的时候要进行你不同操作</li></ul></li></ul></li></ul><ul><li><p>Best Time to Buy and Sell Stock 系列</p><ul><li>I<ul><li>一次买卖： max=Math.max(max,nums[i]-min); min = Math.min(min, nums[i]);</li></ul></li><li>II<ul><li>无数次买卖，只要后面一个比前一个高就买卖</li></ul></li><li>III （需要重做）<ul><li>最多两次买卖</li></ul></li><li>IV  （需要重做）<ul><li>最多k次</li></ul></li></ul></li><li><p>Longest Common Substring </p><ul><li>最长公共子串（要求连续） 扫描一遍即可</li></ul></li><li>Longest Common Subsequence<ul><li>最长公共子序列 <ul><li>方法一DP dp[A.length()][B.length()] dp[i][j]={dp[i-1][j-1]+1 if A[i]=B[j]}{Max(dp[i-1][j],dp[i][j-1])}</li></ul></li></ul></li><li>Longest Continuous Increasing Subsequence<ul><li>套路其实和Maximum Subarray一样但是更简单</li></ul></li><li>Longest Increasing Subsequence<ul><li>方法一dp </li></ul></li><li>Number of LIS<ul><li>保留两个dp数组 </li><li>len[] 和LIS中的dp一样 保存到当前位置的最长增序列的长度</li><li>count[] 保存到当前位置的最长增序列的数量， 如果len[i]==len[j]+1的时候说明有重复的 count[i]+=count[j]</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每日学习日记 2017-12-29&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>操作系统复习笔记 02</title>
    <link href="http://www.yutong-han.net/2017/12/27/OS-2/"/>
    <id>http://www.yutong-han.net/2017/12/27/OS-2/</id>
    <published>2017-12-28T07:26:04.799Z</published>
    <updated>2017-12-31T01:17:33.770Z</updated>
    
    <content type="html"><![CDATA[<p>操作系统复习笔记 操作系统的任务和计算机系统组织<br><a id="more"></a><br>操作系统为执行程序提供运行环境。它为运行程序和使用这些程序的用户提供一定的服务。<br>下图展示了操作系统提供的各类服务以及他们之间的关系。<br><img src="/images/osservices.png" alt=""></p><h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><p>向操作系统传递参数又三种方法。最简单的是通过<strong>寄存器来传递参数</strong>。有时，参数数量会比寄存器多，这时，这些参数通常<strong>存在内存的块和表</strong>中，并将块的地址通过寄存器来传递。参数也可以通过程序<strong>放在或者压入堆栈中，并通过操作系统弹出</strong></p><p>系统调用的种类</p><ol><li>Process Control<ul><li>end, abort</li><li>load,execute</li><li>create process terminate process</li><li>get process attributes set porcess attribute</li><li>wait for time</li><li>wait event signal event</li><li>allocate and free memory</li></ul></li><li>File management<ul><li>create file, delete file</li><li>open, close</li><li>read write reposition</li><li>get file attribute set file attributes</li></ul></li><li>Device management<ul><li>request device, release device</li><li>read write repostion </li><li>get device attributes set device attributes</li><li>logically attach or detach devices</li></ul></li><li>Information maintenance <ul><li>get time or date, set time or date</li><li>get system data, set system data</li><li>get process, file or device attributes</li><li>set process, file or device attributes</li></ul></li><li>Communications <ul><li>create delete communication connection</li><li>send receive messages </li><li>transfer status information</li><li>attach or detach remote devices</li></ul></li></ol><h3 id="OS-structure"><a href="#OS-structure" class="headerlink" title="OS structure"></a>OS structure</h3><h4 id="Simple-Structure"><a href="#Simple-Structure" class="headerlink" title="Simple Structure"></a>Simple Structure</h4><ul><li>Difficult to implement and maintain.   </li><li>Perfomance advantage: there is very little overhead in the system</li></ul><h4 id="Layered-Approach-分层"><a href="#Layered-Approach-分层" class="headerlink" title="Layered Approach 分层"></a>Layered Approach 分层</h4><ul><li>OS is broken into a number of layers</li><li>The bottom layer(layer 0) is the hardware</li><li>The highest(Layer N)is the user interface</li><li>A typical layer consists of data strutures and a set of routines that can be invoked bu higher-level layers.<ul><li>In turn this layer can invoke operation on lower-level layers.</li></ul></li><li>Advantage:<ul><li>Simplicity of contruction and debugging</li></ul></li><li>Difficulty:<ul><li>Appropriately defining the various layers</li><li>tend to be less efficient than other types</li></ul></li></ul><h4 id="MicroKernel-微内核"><a href="#MicroKernel-微内核" class="headerlink" title="MicroKernel 微内核"></a>MicroKernel 微内核</h4><ul><li>Removing all nonessential components from the kernel and implementing them as sysyem and user-level programs.</li><li>Result is a smaller kernel.</li><li>Main function :provide communication between the cient program and the various services that are also running in user space.</li><li>Communication is provided through messahe passing.</li><li>Benefits:<ul><li>It makes ectending the operating system easier.</li><li>easier to port the operating system to new architectures</li><li>more reliable</li></ul></li><li>Difficulty:<ul><li>suffer due to increased system-function overhead</li></ul></li></ul><h4 id="Modules-模块"><a href="#Modules-模块" class="headerlink" title="Modules 模块"></a>Modules 模块</h4><ul><li>Object-oriented</li><li>each core component is separate</li><li>clearly defined interfaces</li><li>each is loadanble as needed within the kernel </li><li>similar to layers but with more flexible</li></ul><h3 id="Virtual-Machine"><a href="#Virtual-Machine" class="headerlink" title="Virtual Machine"></a>Virtual Machine</h3><p>Allow one hardware to run different systems</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;操作系统复习笔记 操作系统的任务和计算机系统组织&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dairy-2017-12-27</title>
    <link href="http://www.yutong-han.net/2017/12/27/dairy-1227/"/>
    <id>http://www.yutong-han.net/2017/12/27/dairy-1227/</id>
    <published>2017-12-27T09:35:03.527Z</published>
    <updated>2017-12-30T19:58:37.807Z</updated>
    
    <content type="html"><![CDATA[<p>每日学习日记 2017-12-27<br><a id="more"></a><br>今日任务：<br>OS看完第二章</p><p>继续做DP经典题</p><h3 id="博弈DP-MiniMax：-能得到的是maximize-the-minimum-gain"><a href="#博弈DP-MiniMax：-能得到的是maximize-the-minimum-gain" class="headerlink" title="博弈DP MiniMax： 能得到的是maximize the minimum gain"></a><strong>博弈DP MiniMax</strong>： 能得到的是maximize the minimum gain</h3><p>Coins in a Line 有取巧的return n % 3 != 0 ;办法<br>Coins in a Line II： 带有具体值的Conins in a Line  有两种方法：top-down and bottom-up<br>375 Guess Number Higher or Lower II <em>需要重做</em><br>Flip Game 1 2</p><pre><code>- 1是2的一个引子- </code></pre><p>Nim game 三个选择的Coins 取巧办法%4</p><p>Palindrome Partitioning II<br>Burst Balloons<br>Scramble String</p><p>Longest Common Subsequence<br>One Edit Distance<br>Edit Distance<br>Minimum insertions to form a palindrome<br>WildCard Matching<br>Regular Expression Mathcing<br>Word Break<br>Word Break II<br>Interleaving String<br>Bomb Enemy</p><p>背包系列</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每日学习日记 2017-12-27&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dairy-2017-12-26</title>
    <link href="http://www.yutong-han.net/2017/12/26/dairy-1226/"/>
    <id>http://www.yutong-han.net/2017/12/26/dairy-1226/</id>
    <published>2017-12-26T08:27:40.184Z</published>
    <updated>2017-12-27T09:35:52.614Z</updated>
    
    <content type="html"><![CDATA[<p>每日学习日记 2017-12-26<br><a id="more"></a></p><ul><li>漆栅栏，漆墙，再漆房<ul><li>Paint Fence</li><li>Paint House</li><li>Paint House II</li></ul></li><li>滚动数组<ul><li>Minimum Path Sum</li><li>Maximal Square</li></ul></li><li>记忆化搜索<ul><li>Longest Increasing Path in a Matrix </li></ul></li><li>博弈型DP<ul><li>375 Guess Number Higher or Lower II 需要重做</li><li>Guess Number Higher or Lower （并不是dp，但是居然二分搜索TLE了！！需要三分搜索。注意一下。）</li></ul></li></ul><p>操作系统复习情况：<br>当年没有学计网的时候看的晕头转向的东西，突然想明白了一些了。<br>看完OS就去看计网啊，集群分布式都要考虑计算机网络才是。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每日学习日记 2017-12-26&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dairy-2017-12-25</title>
    <link href="http://www.yutong-han.net/2017/12/25/dairy-1225/"/>
    <id>http://www.yutong-han.net/2017/12/25/dairy-1225/</id>
    <published>2017-12-25T08:43:58.828Z</published>
    <updated>2017-12-26T08:29:02.206Z</updated>
    
    <content type="html"><![CDATA[<p>每日学习日记 2017-12-25<br><a id="more"></a><br>动态规划</p><ol><li>House Robber <ul><li>1</li><li>2</li><li>3</li></ul></li><li>漆栅栏，漆墙，再漆房<ul><li>Paint Fence</li><li>Paint House</li><li>(FB) Paint House II</li></ul></li><li>动态规划，矩阵路径，滚动数组<ul><li>Unique Paths II</li><li>Minimum Path Sum</li><li>Maximal Square</li><li>Maximal Rectangle</li></ul></li><li>动态规划，记忆化搜索<ul><li>Longest Increasing Continuous Subsequence</li><li>Longest Increasing Path in a Matrix </li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每日学习日记 2017-12-25&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>操作系统复习笔记 01</title>
    <link href="http://www.yutong-han.net/2017/12/24/OS-1/"/>
    <id>http://www.yutong-han.net/2017/12/24/OS-1/</id>
    <published>2017-12-24T18:18:09.840Z</published>
    <updated>2017-12-28T07:27:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>操作系统复习笔记 操作系统的任务和计算机系统组织<br><a id="more"></a></p><h2 id="操作系统做了那些工作"><a href="#操作系统做了那些工作" class="headerlink" title="操作系统做了那些工作"></a>操作系统做了那些工作</h2><p>在整个的计算机系统中，操作系统究竟扮演着什么角色，首先要从计算机系统大概就分为那些组成开始说起<br>计算机系统大概分为 <strong>hardware</strong>, <strong>operating system</strong>, <strong>application programs</strong>以及<strong>user</strong></p><p>从系统的角度上看，操作系统是 <strong><em>resource allocator</em></strong> 。计算机系统中有着大量的resource例如CPU 时间，memory space, file-storage space I/O device.操作系统的作用就是当系统发生冲突<strong>conflict</strong>的时候，操作系统要公平有效的对资源进行分配。<br>另一种看法是操作系统是<strong>control program</strong>， 操作系统需要管理各种I/O设备。</p><h2 id="操作系统定义"><a href="#操作系统定义" class="headerlink" title="操作系统定义"></a>操作系统定义</h2><p>一个比较常见的定义是将操作系统看作是一个一直运行的被称为<strong>kernel</strong>的程序。（除了kernel之外计算机还有两种程序，一种是system programs一种是application prgrams.)</p><h2 id="计算机系统组织"><a href="#计算机系统组织" class="headerlink" title="计算机系统组织"></a>计算机系统组织</h2><p>在探讨操作系统操作之前，需要先了解一下计算机系统的基本结构</p><h4 id="计算机系统操作"><a href="#计算机系统操作" class="headerlink" title="计算机系统操作"></a>计算机系统操作</h4><p>现代计算机又一个或多个CPU和若干设备控制器通过common bus连接而成， common bus提供了对共享内存的访问。 每个设备控制器控制一种特定类型的设备。CPU和设备控制器可以并行工作，同时竞争内存周期。为了确保对共享内存的有序访问，需要内存控制器来协调对内存的访问。</p><p>当打开电源或者重启时，计算机开始运行。这个时间他需要运行一个初始化的程序，bootstrap， bootstrap是一个简单的程序，他一般存储在computer hardware read-only memory<strong>ROM</strong>或者electrically erasable programmable read-only memory（<strong>EEPROM</strong>）。bootstrap需要知道如何加载OS，如何启动执行程序，所以bootstrap程序需要在在kernel中并且放入内存。</p><p>当kernel加载成功并且运行时，他会开启一些服务。其中一些服务不在内核中，他在boot time的时候被加载到内核中。这些进程被称做是<strong>system process</strong>或者<strong>system daemons（守护进程）</strong>。 在Unix系统中 第一个进程是init， 它会开启许多daemons，完成这些过程后系统加载完成，系统等待事务event出现。</p><p>事件的发生通常通过通过硬件或者软件的中断<strong>interrupt</strong>来表示。硬件可随时通过系统总线向CPU发出信号，以触发中断。软件通过执行特别操作如系统调用（system call）也能触发中断</p><p>CPU中断的时候，CPU将暂停它现在在做的事情转到固定的位置去继续执行。该固定位置一般是中断服务程序开始的地方。中断服务开始执行，执行结束后CPU重新执行被中断的计算。</p><p>处理转移的的简单方法是调用一个通用子程序来检查中断信息。接着，该子程序会调用相应的中断处理程序，由于只有少量的预先定义的中断，所以可以使用中断处理子程序的指针表。这样通过指针表可间接调用中断处理子程序，而不需要通过其他中间子程序。 通常，指针表位于低地址内存。这些位置包含各种设备的中断处理子程序地址。这种地址的数组或中断向量（<strong>interrupt vector</strong>） 课通过唯一设备号来索引， 以提供设备的中断处理子程序的地址。</p><p>中断体系结构也保存被中断指令的地址。现代结构返回系统堆栈中的地址。如果中断处理程序需要修改处理器状态，如修改寄存器的值，它必须明确地保存当前状态并在返回前恢复该状态。在处理中断之后，保存的返回地址会装入程序计数器，被中断的计算可以重新开始。</p><h4 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h4><p>计算机程序必须在内存（或者随机访问内存random access memory， RAM） 中以便于运行</p><p>内存是处理可以直接访问的唯一大容量存储区域。他通常是用被称为动态随机访问内存 DRAM 的半导体技术实现的，通过一系列的load store指令来交互。</p><p>理想状态下程序和数据都存储在内存中，但是由于<strong>内存太小</strong>，<strong>内存是易失性存储设备，掉电会失去所有内容</strong>所以是不可能的。<br>因此绝大多数计算机都提供secondary storage 作为内存的扩充。</p><h4 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h4><p>对于大块的数据移动，比如磁盘I/O，会有超载问题。 DMA（direct memory access） 就是为了解决这个问题而设计的。这位这种IO设备设置好缓冲，指针和计数器之后，设备控制器能在本地缓冲和内存之间传送一整块数据，而无需CPU的干预。每块只产生一个中断，来告知设备驱动程序操作已经完成，为不像低速设备那样每个字节产生一个中断。当设备控制器在执行这些操作的时候，CPU可以去完成其他工作。</p><h4 id="集群系统"><a href="#集群系统" class="headerlink" title="集群系统"></a>集群系统</h4><p>集群系统雨多处理器系统不同，它是有两个多多个独立的系统耦合起来的</p><p>一个较为常用的定义是集群计算机共享存储并通过局域网链接，或者更快的内部链接。</p><p>集群通常用来提供高可用性服务</p><p>集群可以是对称的也可以是不对称的。</p><p>非对称集群中，一台机器处于热备份模式，而另一台运行应用程序。热备份主机只监视活动服务器。如果该服务器失效，那么热备份主机会成为先行服务器。</p><p>对于对称集群，两个或多个主机都运行应用程序，他们互相监视。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;操作系统复习笔记 操作系统的任务和计算机系统组织&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dairy-2017-12-24</title>
    <link href="http://www.yutong-han.net/2017/12/24/dairy-1224/"/>
    <id>http://www.yutong-han.net/2017/12/24/dairy-1224/</id>
    <published>2017-12-24T08:07:20.502Z</published>
    <updated>2017-12-24T08:09:55.393Z</updated>
    
    <content type="html"><![CDATA[<p>和学长聊了一下感觉收获颇丰<br>从今天开始要开始复习基础课啦！<br>先从操作系统开始吧<br>白天用心刷题，晚上回来复习基础课<br>明天任务：<br>Strobogrammatic 数生成</p><pre><code>- Strobogrammatic Number 1 2 3</code></pre><p>DP题目：</p><p>复习任务：<br>写完一篇读书笔记</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;和学长聊了一下感觉收获颇丰&lt;br&gt;从今天开始要开始复习基础课啦！&lt;br&gt;先从操作系统开始吧&lt;br&gt;白天用心刷题，晚上回来复习基础课&lt;br&gt;明天任务：&lt;br&gt;Strobogrammatic 数生成&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- Strobogrammatic Number
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dairy-2017-12-22</title>
    <link href="http://www.yutong-han.net/2017/12/22/dairy-1222/"/>
    <id>http://www.yutong-han.net/2017/12/22/dairy-1222/</id>
    <published>2017-12-23T07:33:20.378Z</published>
    <updated>2017-12-24T08:07:10.743Z</updated>
    
    <content type="html"><![CDATA[<p>这周周末任务全面的复习一下回溯法：</p><ol><li>排列组合系列：<ul><li>Subsets 1 2 </li><li>Combination，Combination Sum 1 2 3 4 </li><li>Permutation 1 2 </li></ul></li><li>N 皇后 1 2 </li><li>数独</li><li>Word Ladder 1 2 </li><li>Number of Ways<ul><li>Android Unlock Patterns</li><li>Decode Ways</li></ul></li><li>DFS flood filling<ul><li>Word Search </li><li>Number of Islands</li><li>Surrounded Regions</li></ul></li><li>Strobogrammatic 数生成<ul><li>Strobogrammatic Number 1 2 3</li></ul></li><li>String 构造式<ul><li>Generalized Abbreviation</li><li>Remove Invalid Parentheses</li><li>Expression Add Operators</li></ul></li><li>Word Pattern I &amp; II</li><li>枚举法<ul><li>Generate Parentheses</li><li>Restore IP Addresses</li><li>Palindrome Partitioning</li><li>Letter Combinations of a Phone Number </li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这周周末任务全面的复习一下回溯法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;排列组合系列：&lt;ul&gt;
&lt;li&gt;Subsets 1 2 &lt;/li&gt;
&lt;li&gt;Combination，Combination Sum 1 2 3 4 &lt;/li&gt;
&lt;li&gt;Permutation 1 2 &lt;/li&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dairy-2017-12-21</title>
    <link href="http://www.yutong-han.net/2017/12/21/dairy-1221/"/>
    <id>http://www.yutong-han.net/2017/12/21/dairy-1221/</id>
    <published>2017-12-21T08:29:58.340Z</published>
    <updated>2017-12-22T07:28:05.585Z</updated>
    
    <content type="html"><![CDATA[<p>每日学习日记 2017-12-20<br><a id="more"></a><br>回溯的经典题看了个七七八八了<br>今天做点应用</p><ol><li>216    Combination Sum III (Done)</li><li>377 Combination Sum IV (Done)</li><li>17 Letter Combinations of a Phone Number(Done)</li><li>131 Palindrome Partitioning(Done)</li><li>51 N-Queens（hard）（Done)</li><li>52     N-Queens II （hard）(Done)</li></ol><p>复习 </p><ol><li>subset 12 (Done)</li><li>permutation12 (Done)</li><li>combination (Done)</li><li>241 Different Ways to Add Parentheses(Done)</li></ol><p>选做：</p><ol><li>10 Regular Expression Matching（hard）</li><li>282 Expression Add Operators</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每日学习日记 2017-12-20&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dairy-2017-12-20</title>
    <link href="http://www.yutong-han.net/2017/12/20/dairy-1220/"/>
    <id>http://www.yutong-han.net/2017/12/20/dairy-1220/</id>
    <published>2017-12-20T20:26:39.551Z</published>
    <updated>2017-12-21T08:29:49.728Z</updated>
    
    <content type="html"><![CDATA[<p>每日学习日记 2017-12-20<br><a id="more"></a><br>今天收到了Hulu的约面试通知，约了一个月之后。希望能约成功吧。<br>加油加油希望接下来努力！顺利！！<br>今日任务：<br>跟学长确定一下recommendation的项目<br>继续做回溯的题！今天要把回溯吃透！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每日学习日记 2017-12-20&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dairy-2017-12-19</title>
    <link href="http://www.yutong-han.net/2017/12/19/dairy-1219/"/>
    <id>http://www.yutong-han.net/2017/12/19/dairy-1219/</id>
    <published>2017-12-19T08:04:37.961Z</published>
    <updated>2017-12-20T20:26:20.751Z</updated>
    
    <content type="html"><![CDATA[<p>每日学习日记 2017-12-19<br><a id="more"></a><br>今日任务：<br>leetcode 107-110最少<br>foo 到level 3  完成<br>主要做回溯部分</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每日学习日记 2017-12-19&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dairy-2017-12-18</title>
    <link href="http://www.yutong-han.net/2017/12/18/dairy-12-18/"/>
    <id>http://www.yutong-han.net/2017/12/18/dairy-12-18/</id>
    <published>2017-12-19T07:38:02.654Z</published>
    <updated>2017-12-19T07:44:22.019Z</updated>
    
    <content type="html"><![CDATA[<p>每日学习日记 2017-12-18<br><a id="more"></a></p><p>今天复习了快速排序，快速选择算法<br>真的感觉一遇到递归相关问题就很容易炸毛。。</p><p>晚上做了一下gg的foobar，感觉自己还是很弱啊。。。<br>明天继续做回溯算法相关，如果有时间复习一下二叉树</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每日学习日记 2017-12-18&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dairy-2017-1217</title>
    <link href="http://www.yutong-han.net/2017/12/17/dairy-1217/"/>
    <id>http://www.yutong-han.net/2017/12/17/dairy-1217/</id>
    <published>2017-12-17T23:30:18.820Z</published>
    <updated>2017-12-18T06:28:58.208Z</updated>
    
    <content type="html"><![CDATA[<p>学习了一下分治算法，感觉自己递归相关还是软肋啊</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;学习了一下分治算法，感觉自己递归相关还是软肋啊&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dairy-2017-12-16</title>
    <link href="http://www.yutong-han.net/2017/12/16/dairy-1216/"/>
    <id>http://www.yutong-han.net/2017/12/16/dairy-1216/</id>
    <published>2017-12-17T00:35:16.091Z</published>
    <updated>2017-12-17T23:30:28.155Z</updated>
    
    <content type="html"><![CDATA[<p>Spark 配置和简单的小程序 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Spark 配置和简单的小程序 &lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dairy-2017-12-15</title>
    <link href="http://www.yutong-han.net/2017/12/15/dairy-1215/"/>
    <id>http://www.yutong-han.net/2017/12/15/dairy-1215/</id>
    <published>2017-12-15T08:15:24.771Z</published>
    <updated>2017-12-16T07:59:42.893Z</updated>
    
    <content type="html"><![CDATA[<p>今日任务：<br>链表题总结 递归 遍历 双指针 等等</p><p>面筋题中的链表题</p><p>由于链表和二叉树有一定的相似性，明日任务，复习二叉树总结二叉树的相关内容</p><p>今日完成情况：总结了一半，明天继续。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今日任务：&lt;br&gt;链表题总结 递归 遍历 双指针 等等&lt;/p&gt;
&lt;p&gt;面筋题中的链表题&lt;/p&gt;
&lt;p&gt;由于链表和二叉树有一定的相似性，明日任务，复习二叉树总结二叉树的相关内容&lt;/p&gt;
&lt;p&gt;今日完成情况：总结了一半，明天继续。&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dairy-2017-12-14</title>
    <link href="http://www.yutong-han.net/2017/12/14/dairy-1214/"/>
    <id>http://www.yutong-han.net/2017/12/14/dairy-1214/</id>
    <published>2017-12-14T08:40:22.148Z</published>
    <updated>2017-12-15T08:13:38.528Z</updated>
    
    <content type="html"><![CDATA[<p>每日学习日记 2017-12-14<br><a id="more"></a><br>今日任务：<br>总结链表题目<br>写掉课程prj report<br>添加个人简历这部分report</p><p>完成情况：<br>只写掉了report<br>没有完成链表总结</p><p>每次写report的时候都觉得自己大概真的不适合读博，唉，语言表达能力也是能力的一种啊，继续加油吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每日学习日记 2017-12-14&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dairy-2017-12-13</title>
    <link href="http://www.yutong-han.net/2017/12/13/dairy-1213/"/>
    <id>http://www.yutong-han.net/2017/12/13/dairy-1213/</id>
    <published>2017-12-13T08:11:24.148Z</published>
    <updated>2017-12-14T08:40:05.776Z</updated>
    
    <content type="html"><![CDATA[<p>每日学习日记 2017-12-12<br><a id="more"></a><br>今日任务：<br>学习list里面链表部分全部做完<br>（1214任务写这部分总结<br>晚上写211 report</p><p>完成情况：<br>链表题做完</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每日学习日记 2017-12-12&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Dairy-2017-12-12</title>
    <link href="http://www.yutong-han.net/2017/12/12/dairy-1212/"/>
    <id>http://www.yutong-han.net/2017/12/12/dairy-1212/</id>
    <published>2017-12-13T07:16:08.299Z</published>
    <updated>2017-12-13T07:52:41.436Z</updated>
    
    <content type="html"><![CDATA[<p>每日学习日记 2017-12-12<br><a id="more"></a></p><p>鸡汤先写在前面吧，我说我不难受，我没有了不服输的劲，假的，我瞎说的。<br>我这个人真的的慢热到爆炸啊，而且peer pressure对我真的的是一碰一个准。<br>即使只是不想比人差，也要努力不是。<br>从今天开始每天纪录自己学习了什么，每天都要进步。<br>曾经的笨拙的努力可以奏效，现在身边都是比自己更聪明更努力的人怎么就自命堕落的放弃了呢。</p><p>就是不服啊。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每日学习日记 2017-12-12&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Web Information Management 0 - IR Overview</title>
    <link href="http://www.yutong-han.net/2017/12/11/ir-0/"/>
    <id>http://www.yutong-han.net/2017/12/11/ir-0/</id>
    <published>2017-12-12T07:33:21.978Z</published>
    <updated>2017-12-13T07:23:34.517Z</updated>
    
    <content type="html"><![CDATA[<script type="text/x-mathjax-config">  MathJax.Hub.Config({tex2jax: {inlineMath: [['$','$'], ['\\(','\\)']]}});</script><script type="text/javascript" async src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-MML-AM_CHTML"></script><p>非常有幸这学期上了<a href="http://oak.cs.ucla.edu/~cho/" target="_blank" rel="noopener">Prof.Cho</a>的Web Information Management 这门课。终于忙完了final趁着自己还能访问他的课程回放，赶紧写一些课程总结。真的是非常棒的一节课了，讲的很全面很有逻辑，也给了一些可以让人继续展开学习的地方。<br><a id="more"></a></p><p>搜索引擎系统主要分成两个主要的部分，crawling 和 retrieval。这个系列的博客我主要专注于讨论一下retrieval的部分</p><h2 id="Information-Retrieval-信息检索问题"><a href="#Information-Retrieval-信息检索问题" class="headerlink" title="Information Retrieval 信息检索问题"></a>Information Retrieval 信息检索问题</h2><p>直观的来讲，信息检索问题所做的事情是 用户输入一个查询指令（query），系统返回相关的网页。所以信息检索问题的关键就是如何得到与query 相关的网页。<br>根据这一想法，我们可以得到数学化的IR问题的定义：</p><ul><li>数据来源<ul><li>词典（lexicon）: \(V={w_1, w_2,…,w_n}\)</li><li>文档 （document）: $d_i = w_i1,w_i2,…w_ili$</li><li>语料 （corpus）:$C={d_1,d_2,…d_m} $</li></ul></li><li>查询指令<ul><li>Qurey : $Q = w_1,w_2,…w_l$</li></ul></li><li>输出: 文档集合<ul><li>我们假设当用户输入一个指令的时候，用户有着既定的想要系统返回的文档集合 $R(q) \in C$</li><li>系统输出的文档集合为 $R’(q) \in C$</li></ul></li></ul><p>信息检索问题的目的是使 $R(q) \in C$ 和 $R’(q) \in C$ 越相近越好</p><p>这里同时可以给出相近的定义</p>]]></content>
    
    <summary type="html">
    
      &lt;script type=&quot;text/x-mathjax-config&quot;&gt;
  MathJax.Hub.Config({tex2jax: {inlineMath: [[&#39;$&#39;,&#39;$&#39;], [&#39;\\(&#39;,&#39;\\)&#39;]]}});
&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot; async src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-MML-AM_CHTML&quot;&gt;
&lt;/script&gt;


&lt;p&gt;非常有幸这学期上了&lt;a href=&quot;http://oak.cs.ucla.edu/~cho/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Prof.Cho&lt;/a&gt;的Web Information Management 这门课。终于忙完了final趁着自己还能访问他的课程回放，赶紧写一些课程总结。真的是非常棒的一节课了，讲的很全面很有逻辑，也给了一些可以让人继续展开学习的地方。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
